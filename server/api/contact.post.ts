import { defineEventHandler, readBody, createError } from 'h3'
import { createClient } from '@supabase/supabase-js'
import { useRuntimeConfig } from '#imports'
import { $fetch } from 'ofetch'

export default defineEventHandler(async (event) => {
  const { name, email, topic } = await readBody(event)
  const config = useRuntimeConfig()

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
  const supabase = createClient(
    config.public.supabaseUrl,
    config.public.supabaseKey
  )

  // 1) –ó–∞–ø–∏—Å–∞—Ç—å –≤ Supabase (—Ç–∞–±–ª–∏—Ü–∞ contact_form_responses)
  const { error: dbError } = await supabase
    .from('contact_form_responses')
    .insert([{ name, email, topic, created_at: new Date().toISOString() }])

  if (dbError) {
    throw createError({ statusCode: 500, statusMessage: dbError.message })
  }

  // 2) –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram (–µ—Å–ª–∏ –µ—Å—Ç—å chat ids)
  const chatIdsRaw = config.telegramChatIds || ''
  const chatIds = chatIdsRaw.split(',').map(id => id.trim()).filter(Boolean)
  if (chatIds.length > 0 && config.telegramBotToken) {
    const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })
    const telegramText = [
      'üíå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Ñ–æ—Ä–º—ã KING DESIGNN*',
      '',
      `üë§ *–ò–º—è:* _${name || '-'}_`,
      `‚úâÔ∏è *Email:* _${email || '-'}_`,
      `üïí *–í—Ä–µ–º—è:* _${timestamp}_`,
      '',
      '*üí¨ –¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:*',
      `${topic || '-'}`,
      '',
      'üî• –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!'
    ].join('\n')

    for (const chatId of chatIds) {
      try {
        await $fetch(`https://api.telegram.org/bot${config.telegramBotToken}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: {
            chat_id: chatId,
            text: telegramText,
            parse_mode: 'Markdown'
          }
        })
      } catch (err) {
        console.error('Telegram send error:', err)
      }
    }
  }

  return { success: true }
})
