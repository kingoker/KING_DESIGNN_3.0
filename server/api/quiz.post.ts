import { defineEventHandler, readBody, createError } from 'h3'
import { createClient } from '@supabase/supabase-js'
import { useRuntimeConfig } from '#imports'
import { $fetch } from 'ofetch'

export default defineEventHandler(async (event) => {
  // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  const { answers, contact, cost } = await readBody(event) as {
    answers: Record<string, number[]>
    contact: { name: string; email?: string; phone?: string }
    cost: number
  }

  const config = useRuntimeConfig()
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase-–∫–ª–∏–µ–Ω—Ç–∞ —Å Service Key
  const supabase = createClient(
    config.public.supabaseUrl,
    config.public.supabaseKey
  )

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
  const payload = {
    name:       contact.name,
    email:      contact.email || null,
    phone:      contact.phone || null,
    cost,
    answers:    JSON.stringify(answers),
    created_at: new Date().toISOString()
  }
  const { data, error } = await supabase.from('responses').insert([payload])
  console.error('Supabase insert result:', { data, error })
  if (error) {
    throw createError({ statusCode: 500, statusMessage: error.message })
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º–µ—Ç–∫–∏ –æ–ø—Ü–∏–π –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const { data: questions } = await supabase.from('questions').select('id, text')
  const { data: options }   = await supabase.from('options').select('id, label')

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã: –≤–æ–ø—Ä–æ—Å + —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
  const formattedAnswers = Object.entries(answers)
    .map(([qid, optIds]) => {
      const questionText = questions?.find(q => q.id === Number(qid))?.text || `–í–æ–ø—Ä–æ—Å ${qid}`
      const labels = optIds
        .map(id => options?.find(o => o.id === id)?.label || String(id))
        .join(', ')
      return `‚Ä¢ *${questionText}*:\n  ${labels}`
    })
    .join('\n\n')

  // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
  const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'America/New_York' })
  const telegramMessage = [
    'üéâ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ –∫–≤–∏–∑–∞ KING DESIGNN!* üéâ\n\n',
    `üë§ *–ò–º—è:* _${contact.name}_`,
    contact.email ? `‚úâÔ∏è *Email:* _${contact.email}_` : '',
    contact.phone ? `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* _${contact.phone}_` : '',
    `\n\nüí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* _${cost}$_`,
    `üïí *–í—Ä–µ–º—è:* _${timestamp}_`,
    '',
    '\n\n*üìù –û—Ç–≤–µ—Ç—ã:*\n',
    formattedAnswers,
    '',
    '\n\n\nüöÄ –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è –∏ –ø—Ä–æ–∫–∞—á–∞–µ–º –≤–∞—à—É –∏–¥–µ—é!'
  ]
  .filter(Boolean)
  .join('\n')

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
  try {
    await $fetch(`https://api.telegram.org/bot${config.telegramBotToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: {
        chat_id:    config.telegramChatId,
        text:       telegramMessage,
        parse_mode: 'Markdown'
      }
    })
  } catch (err) {
    console.error('Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–≤–∏–∑–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', err)
  }

  return { success: true }
})

